
		// // Render the City Map
		// cityTileMap.render(0, 0, 0);
		// cityTileMap.render(0, 0, 1);
		//
		// // Highlight the house near the robber
		// if (highlightHouse)
		// cityTileMap.render(0, 0, 2 + robber.nearByBldg.ID);
		
		
			// public void move(float destX, float destY)
	// {
	// this.direction = new Vector2f(destX - this.xPos, destY - this.yPos);
	//
	// this.isMoving = true;
	// }
	
	
					//				// if the Policeman is already moving don't interrupt him
				//				// wait until he reaches his position
				//				if (isMoving)
				//					return;  
	//		Dimension screenSize= Toolkit.getDefaultToolkit().getScreenSize();
	
	
	/**
	 * Method used to save game to a JSON file with path $DIRECTORY_PATH/$USERNAME
	 * Data saved includes highscore, time spent playing the game, the highest level reached... 
	 * 
	 * @throws Exception
	 */
	public void save(Integer newScore) throws Exception{

		// path 
		File accountFile = new File(SAVE_DIRECTORY_PATH + username + ".json");

		// if first time playing 
		// create directory and save
		if (accountFile.createNewFile())
		{	
			HashMap<Date, Integer> pastScoresMap = new HashMap<>();
			pastScoresMap.put(new Date(), newScore);					// put the new score
			pastScores.add(pastScoresMap);

			HashMap<String, Object> map = new HashMap<>();
			map.put(HIGHSCORE, highscore.toString());
			map.put(LEVEL_REACHED, highestLevelReached.toString());
			map.put(IS_ROBBER, isRobber.toString());
			map.put(USERNAME, username);
			map.put(TIME_PLAYING, timePlaying.toString());
			map.put(PAST_SCORES, pastScores);

			JSONObject jsonObj = new JSONObject(map);

			FileWriter writer = new FileWriter(accountFile);
			jsonObj.writeJSONString(writer);  

		}
		else {
			// directory already exists 

			// get data + modify what is necessary

			// save

		}
	}
	
		private boolean collides() {
		// convert the position of the Player from pixels to 'Tile' position
		// divide by the tile Size (in this case 16px)

		boolean isInCollision = false;
		robber.nearByBldg = null;
		
		for (Building bldg: buildings) {
			if (robber.rect.intersects(bldg.frame)) {
				highlightHouse = isInCollision = true;
				robber.nearByBldg = bldg;
			}
		}
		return highlightHouse = isInCollision;
	}
	
	
	
			//			if (!isLocked(destX, destY)) {
			//				// Move the policeman to this position
			//				// police1.move(destX, destY);
			//			} else
			//				System.out.println("Is locked");
			
			
				
	public void draw1() {
		this.currentAnimation.draw(this.xPos, this.yPos);

		Policeman policeman;

		// if user is police then the robber moves automatically
		if (!isUser){

			if ((policeman = canSeePolice()) !=null)
			{
				// move in opposite direction
				// get vector to policeman 
				Vector2f directionToPoliceman = new Vector2f(policeman.xPos-this.xPos, policeman.yPos-this.yPos);

				// get the negative vector the one in the opposite direction
				Vector2f negativeVector = directionToPoliceman.negate();


				// flee the policeman only if the user has chosen to play as the police
				this.fleePoliceman(negativeVector);
			}
		}

		if (isMoving) {

			float deltaX = this.xPos - this.destX; 
			float deltaY = this.yPos - this.destY;


			// we want the robber to go all the way horizontally then after arrivign to the correct xpos
			// go all the way vertically, so we declare a variable movingHorizontally and we set it to true whenever the policeman is going horizontally
			// if true, the second if statement is not satisfied and the yPos has to wait for the xPos to finish
			boolean movingHorizontally = false;
			if (Math.abs(deltaX) > 1.0f)
			{
				boolean collides = false; 
				if (deltaX<0)
					collides = !moveRight();
				else
					collides = !moveLeft();
				
				while (collides){
					if(deltaY>0) 
						moveUp();
					else 
						moveDown();
					
					collides = (deltaX>0)? !moveRight() : !moveLeft();
				}

				movingHorizontally = true;
			}

			// check on movingHorizontally done here
			if (Math.abs(deltaY) > 1.0f && !movingHorizontally)
			{	
				boolean collides = false; 
				if (deltaY<0)
					collides = !moveDown();
				else
					collides = !moveUp();
				
				while (collides){
					if(deltaX>0) 
						moveLeft();
					else 
						moveRight();
					
					collides = (deltaY>0)? !moveUp() : !moveDown();
				}
			}

			// 2.0f margin of error
			if (Math.abs(this.xPos - this.destX) < 1.0f
					&& Math.abs(this.yPos - this.destY) < 1.0f) {
				this.isMoving = false;	
			}
		}


	}